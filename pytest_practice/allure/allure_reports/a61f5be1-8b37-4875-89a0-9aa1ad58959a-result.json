{"name": "test_check_first_name_with_invalid_element[edge]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"input-first-name\"]\"}\n  (Session info: MicrosoftEdge=127.0.2651.74); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF7BA9D0602+11762]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BA970949+271417]\n\t(No symbol) [0x00007FF7BA78FE6E]\n\t(No symbol) [0x00007FF7BA7D6964]\n\t(No symbol) [0x00007FF7BA7D69EB]\n\t(No symbol) [0x00007FF7BA812107]\n\t(No symbol) [0x00007FF7BA7F5F7F]\n\t(No symbol) [0x00007FF7BA7CC2FD]\n\t(No symbol) [0x00007FF7BA80FA97]\n\t(No symbol) [0x00007FF7BA7F5BA3]\n\t(No symbol) [0x00007FF7BA7CB80C]\n\t(No symbol) [0x00007FF7BA7CACED]\n\t(No symbol) [0x00007FF7BA7CB3D1]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7BAB4B584+879700]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7BA905D4F+56159]\n\tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7BA8F86E3+1267]\n\tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7BAB4A2DD+874925]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BA978541+303153]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BA974904+287732]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BA974A3B+288043]\n\tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BA96C990+255104]\n\tBaseThreadInitThunk [0x00007FFFABD77374+20]\n\tRtlUserThreadStart [0x00007FFFADBDCC91+33]", "trace": "self = <pytest_practice.allure.test_register.TestRegister object at 0x0000021F1C2A0EC0>\n\n    def test_check_first_name_with_invalid_element(self):\n        self.driver.find_element(By.LINK_TEXT, \"My Account\").click()\n        self.driver.find_element(By.XPATH, \"//a[.='Register']\").click()\n>       self.driver.find_element(By.ID, \"input-first-name\").send_keys(\"Bredlin\")  # incorrect element\n\ntest_register.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021F1C2E4FE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...96C990+255104]\\\\n\\\\tBaseThreadInitThunk [0x00007FFFABD77374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFFADBDCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"css selector\",\"selector\":\"[id=\"input-first-name\"]\"}\nE         (Session info: MicrosoftEdge=127.0.2651.74); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7BA9D0602+11762]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BA970949+271417]\nE       \t(No symbol) [0x00007FF7BA78FE6E]\nE       \t(No symbol) [0x00007FF7BA7D6964]\nE       \t(No symbol) [0x00007FF7BA7D69EB]\nE       \t(No symbol) [0x00007FF7BA812107]\nE       \t(No symbol) [0x00007FF7BA7F5F7F]\nE       \t(No symbol) [0x00007FF7BA7CC2FD]\nE       \t(No symbol) [0x00007FF7BA80FA97]\nE       \t(No symbol) [0x00007FF7BA7F5BA3]\nE       \t(No symbol) [0x00007FF7BA7CB80C]\nE       \t(No symbol) [0x00007FF7BA7CACED]\nE       \t(No symbol) [0x00007FF7BA7CB3D1]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7BAB4B584+879700]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7BA905D4F+56159]\nE       \tMicrosoft::Applications::Events::EventProperty::~EventProperty [0x00007FF7BA8F86E3+1267]\nE       \tMicrosoft::Applications::Events::EventProperty::empty [0x00007FF7BAB4A2DD+874925]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BA978541+303153]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BA974904+287732]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BA974A3B+288043]\nE       \tMicrosoft::Applications::Events::ILogConfiguration::operator* [0x00007FF7BA96C990+255104]\nE       \tBaseThreadInitThunk [0x00007FFFABD77374+20]\nE       \tRtlUserThreadStart [0x00007FFFADBDCC91+33]\n\n..\\..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException"}, "parameters": [{"name": "setup_and_teardown", "value": "'edge'"}], "start": 1722513662575, "stop": 1722513673542, "uuid": "77c1e01e-872f-4dfb-8e23-962feb3ef940", "historyId": "4bfd887a45d6797d10b661b70a7a3de4", "testCaseId": "2e4aab1aaee985a647843a30ce7f03a1", "fullName": "pytest_practice.allure.test_register.TestRegister#test_check_first_name_with_invalid_element", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup_and_teardown', 'screenshot_on_failure')"}, {"name": "parentSuite", "value": "pytest_practice.allure"}, {"name": "suite", "value": "test_register"}, {"name": "subSuite", "value": "TestRegister"}, {"name": "host", "value": "DESKTOP-GA5D9PH"}, {"name": "thread", "value": "4860-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "pytest_practice.allure.test_register"}]}